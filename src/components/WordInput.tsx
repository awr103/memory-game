import React, { useState } from "react"; import { Box, TextField, Button, Typography } from "@mui/material"; import { GameSize } from "../types"; interface WordInputProps {gameSize: GameSize; onWordsSubmit: (words: string[]) => void;} const WordInput: React.FC<WordInputProps> = ({ gameSize, onWordsSubmit }) => {const [words, setWords] = useState<string[]>(Array(gameSize).fill("")); const [error, setError] = useState<string>(""); const handleWordChange = (index: number, value: string) => {const newWords = [...words]; newWords[index] = value; setWords(newWords); setError("");}; const handleSubmit = () => {const emptyWords = words.some(word => !word.trim()); const duplicateWords = new Set(words.map(w => w.trim())).size !== words.filter(w => w.trim()).length; if (emptyWords) {setError("Please fill in all words"); return;} if (duplicateWords) {setError("Please use unique words"); return;} onWordsSubmit(words.map(w => w.trim()));}; return (<Box sx={{ p: 3, maxWidth: 600, mx: "auto" }}><Typography variant="h5" gutterBottom>Enter {gameSize} unique words:</Typography>{error && (<Typography color="error" sx={{ mb: 2 }}>{error}</Typography>)}<Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>{words.map((word, index) => (<TextField key={index} label={`Word ${index + 1}`} value={word} onChange={(e) => handleWordChange(index, e.target.value)} fullWidth />))}<Button variant="contained" color="primary" onClick={handleSubmit} size="large">Find Images</Button></Box></Box>);}; export default WordInput;
